cmd:
  type: python-venv
  command:
    default: python -u run.py
  path:
    default: ~/.opereto/operetovenv
termination_cmd:
  type: python-venv
  command:
    default: python -u kill.py
  path:
    default: ~/.opereto/operetovenv

item_properties:

-   key: debug_mode
    value: false
    type: boolean
    direction: input
    mandatory: false
    help: If checked, the runner runs in debug mode

-   key: pre_task_services
    direction: input
    editor: json
    mandatory: false
    type: json
    value: []
    help: One or more services to run (serially) before the task execution

-   key: worker_config
    direction: input
    editor: json
    mandatory: true
    type: json
    value:
    help: >
      A JSON specifying the worker to run this task service on. The specification may include a name of an existing worker (agent) or a setup and teardown services
      to dynamically create a worker, run the task service in it and teardown the worker at the end.
      Example 1: use an existing agent
      {
        "agent_id": "my_worker",
      }
      Example 2: setup/teardown worker (must include setup/teardown services, no need to specify the sut_environment in the input of the teradown service, the runner handles it automatically)
      {
        "worker_setup": {
            "service": "setup_my_worker",
            "input": {
                "cloud": "aws"
            },
            "agent_id_property": "pod_name",
            "title": "Setup my worker"

        },
        "worker_teardown": {
            "service": "teardown_my_worker",
            "input": {
                "cloud": "aws"
            },
            "agent_id_property": "pod_name",
            "title": "Teardown my worker"
        }
      }

-   key: task_services
    direction: input
    editor: json
    mandatory: true
    type: json
    value: []
    help: >
      A JSON specifying the task service to run. The runner will run it on the worker specified above.
      {
          "service": "my_task",
          "input": {
              "param1": "value1"
          },
          "title": "Running my task"
      }


-   key: valid_exit_codes
    value:
    type: text
    direction: input
    mandatory: false
    help: Comma separated valid exit codes. e.g:1,5,8 for the execution of the testing tool. If not specified, 0 is the default.


-   direction: input
    editor: text
    key: test_results_directory
    mandatory: false
    type: text
    value:
    help: The container directory to save the test results. This directory will be mounted by the runner service to local directory on the docker host that the test listener check periodically.


-   key: test_parser_config
    direction: input
    editor: json
    mandatory: false
    type: json
    value:
    help: >
      Test parser service configurations, passing required input for the selected service.
      The example below is for using Opereto's "opereto_pytest_results_parser" service (included in the Opereto PyTest Services package)
      Example: {
        "service": "opereto_pytest_results_parser",
        "input": null,
        "title": "Parse pytest results"
      }

-   direction: input
    editor: number
    key: keep_parser_running
    mandatory: true
    type: integer
    value: 30
    help: Keep the parser/listeners running after container stops (in seconds)

-   key: post_task_services
    direction: input
    editor: json
    mandatory: false
    type: json
    value: []
    help: One or more services to run (serially) at the end of the task execution

## output properties
-   direction: output
    editor: hidden
    example: 0
    key: task_exitcode
    mandatory: true
    store: []
    type: integer
    value: 0

-   direction: output
    editor: hidden
    example: 0
    key: task_output
    mandatory: true
    store: []
    type: integer
    value: 0


timeout: 3600
type: action
